package internet;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;


public class DbConnection {
    //create a local database connection constructor
	Connection conn;
	
    public DbConnection() throws ClassNotFoundException {
        //connect to mariaDB with username = root and password = ahmed
        //and database name = bushshop
        //and host = localhost
        //and port = 3306
        //and driver = com.mysql.jdbc.Driver
        //and url = jdbc:mysql://localhost:3306/bushshop
        //and user = root
        //and password = ahmed
    	
    	Class.forName("com.mysql.jdbc.Driver")
        try {
          Class.forName("org.mariadb.jdbc.Drivers");
             conn = DriverManager.getConnection("jdbc:mariadb://localhost:3306/bushshop", "root", "ahmed");
             
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }

    //create a method to return all the books in table books 
    public ResultSet getBooks() throws SQLException {
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM books");
        return rs;
    }

    //a method that adds a book to the table books 
    public void addBook(String title, int author_id, String book_isbn, float price, String description, int genre_id) throws SQLException {
        Statement stmt = conn.createStatement();
        try{
            stmt.executeUpdate("INSERT INTO books VALUES ('" + title + "','" + author_id + "','" + book_isbn + "','" + price + "','" + description + "','" + genre_id + "')");
        }catch (SQLException e) {
            e.printStackTrace();
        }
    }

    //create a method that checks if the author exists in the table author by the name given in the parameter
    //if not create a new author and return the author id
    //if yes return the author id
    public int checkAuthor(String authorName) throws SQLException {
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM author WHERE author_name = '" + authorName + "'");
        if(rs.next()) {
            return rs.getInt("author_id");
        }else {
            stmt.executeUpdate("INSERT INTO author VALUES('" + authorName + "')");
            rs = stmt.executeQuery("SELECT * FROM author WHERE author_name = '" + authorName + "'");
            rs.next();
            return rs.getInt("author_id");
        }
    }

    public int checkGenre(String genreName) throws SQLException {
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM genre WHERE genre_name = '" + genreName + "'");
        if(rs.next()) {
            return rs.getInt("genre_id");
        }else {
            stmt.executeUpdate("INSERT INTO genre VALUES('" + genreName + "')");
            rs = stmt.executeQuery("SELECT * FROM genre WHERE genre_name = '" + genreName + "'");
            rs.next();
            return rs.getInt("genre_id");
        }
    }

    public boolean checkISBN(String isbn) throws SQLException {
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM books WHERE book_isbn = '" + isbn + "'");
        if(rs.next()) {
            return true;
        }else {
            return false;
        }
    }

    public boolean addBook(Book book) throws SQLException {
        Statement stmt = conn.createStatement();
        if(checkISBN(book.getIsbn())) {
            return false;
        }else {
            stmt.executeUpdate("INSERT INTO books VALUES('" + book.getTitle() + "','" + book.getAuthorId() + "','" + book.getIsbn() + "','" + book.getPrice() + "','" + book.getDescription() + "','" + book.getGenreId() + "')");
            return true;
        }
    }

    //create a method that return all books that are in the table books
    //and are in the table genre with the name given in the parameter
    //genre_id is the primary key in genre and foreign key in books
    public ResultSet getBooksByGenre(String genreName) throws SQLException {
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM books INNER JOIN genre ON books.genre_id = genre.genre_id WHERE genre_name = '" + genreName + "'");
        return rs;
    }



}
